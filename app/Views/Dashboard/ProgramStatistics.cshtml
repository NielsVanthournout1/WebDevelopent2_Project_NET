@model IEnumerable<app.Models.ProgramStatisticsViewModel>
@{
    ViewData["Title"] = "Statistieken per Opleiding";
}

<div class="container mt-4">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard")">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Statistieken</li>
        </ol>
    </nav>

    <h1 class="mb-4">
        <i class="bi bi-bar-chart"></i> Statistieken per Opleiding
    </h1>

    <div class="row mb-4">
        <div class="col-md-6 col-lg-4">
            <div class="card">
                <div class="card-header bg-light">
                    <h2 class="h5 mb-0">Totale Registraties</h2>
                </div>
                <div class="card-body">
                    <div class="display-4 text-center">
                        @Model.Sum(p => p.TotalRegistrations)
                    </div>
                </div>
            </div>
        </div>
        @if (Model.Any())
        {
            <div class="col-md-6 col-lg-4">
                <div class="card">
                    <div class="card-header bg-light">
                        <h2 class="h5 mb-0">Populairste Opleiding</h2>
                    </div>
                    <div class="card-body">
                        @{
                            var mostPopular = Model.OrderByDescending(p => p.TotalRegistrations).FirstOrDefault();
                            if (mostPopular != null)
                            {
                                <h3 class="h5">@mostPopular.ProgramName</h3>
                                <div class="display-4 text-center">
                                    @mostPopular.TotalRegistrations
                                </div>
                                <div class="text-muted text-center">registraties</div>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-lg-4">
                <div class="card">
                    <div class="card-header bg-light">
                        <h2 class="h5 mb-0">Minst Populaire Opleiding</h2>
                    </div>
                    <div class="card-body">
                        @{
                            var leastPopular = Model.Where(p => p.TotalRegistrations > 0).OrderBy(p => p.TotalRegistrations).FirstOrDefault();
                            if (leastPopular != null)
                            {
                                <h3 class="h5">@leastPopular.ProgramName</h3>
                                <div class="display-4 text-center">
                                    @leastPopular.TotalRegistrations
                                </div>
                                <div class="text-muted text-center">registraties</div>
                            }
                            else
                            {
                                <div class="text-muted text-center">Geen registraties gevonden</div>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="card mb-4">
        <div class="card-header bg-light">
            <h2 class="h5 mb-0">Vergelijking per Opleiding</h2>
        </div>
        <div class="card-body">
            <canvas id="programsChart"></canvas>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h2 class="h5 mb-0">Gedetailleerde Statistieken</h2>
            <div>
                <button class="btn btn-sm btn-outline-primary" onclick="exportStatisticsToExcel()">
                    <i class="bi bi-file-earmark-excel"></i> Exporteren
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table id="statisticsTable" class="table table-striped table-hover mb-0">
                    <thead>
                        <tr>
                            <th>Opleiding</th>
                            <th class="text-center">Totaal</th>
                            <th>Verdeling per Beurs</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var program in Model.OrderByDescending(p => p.TotalRegistrations))
                        {
                            <tr>
                                <td>@program.ProgramName</td>
                                <td class="text-center">
                                    <span class="badge bg-primary">@program.TotalRegistrations</span>
                                </td>
                                <td>
                                    @if (program.TradeShowBreakdown.Any())
                                    {
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var ts in program.TradeShowBreakdown.OrderByDescending(t => t.Count))
                                            {
                                                <span class="badge bg-secondary">@ts.TradeShowName: @ts.Count</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Geen data</span>
                                    }
                                </td>
                                <td>
                                    <a href="@Url.Action("ProgramDetails", "Dashboard", new { id = program.ProgramId })" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-eye"></i> Bekijken
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            renderProgramsChart();
        });

        function renderProgramsChart() {
            const ctx = document.getElementById('programsChart').getContext('2d');
            
            // Prepare data for chart
            const labels = [@Html.Raw(string.Join(",", Model.Select(p => $"'{p.ProgramName}'")))];
            const data = [@Html.Raw(string.Join(",", Model.Select(p => p.TotalRegistrations)))];
            
            // Create the chart
            const chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Aantal Registraties',
                        data: data,
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        function exportStatisticsToExcel() {
            // Create a table for export
            const table = document.createElement('table');
            const headerRow = table.insertRow();
            
            // Add headers
            ['Opleiding', 'Totaal Registraties', 'Beurs Verdeling'].forEach(header => {
                const cell = headerRow.insertCell();
                cell.textContent = header;
            });
            
            // Add data rows
            @foreach (var program in Model.OrderByDescending(p => p.TotalRegistrations))
            {
                <text>
                const row = table.insertRow();
                row.insertCell().textContent = '@program.ProgramName';
                row.insertCell().textContent = '@program.TotalRegistrations';
                
                // Create breakdown text
                const breakdownText = [
                    @foreach (var ts in program.TradeShowBreakdown)
                    {
                        <text>'@ts.TradeShowName: @ts.Count',</text>
                    }
                ].join('; ');
                
                row.insertCell().textContent = breakdownText;
                </text>
            }
            
            // Export logic (similar to ProgramDetails)
            const tableHTML = table.outerHTML;
            const uri = 'data:application/vnd.ms-excel;base64,';
            const template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><meta http-equiv="content-type" content="text/plain; charset=UTF-8"/></head><body><table>{table}</table></body></html>';
            
            const ctx = { worksheet: 'Worksheet', table: tableHTML };
            const data = template.replace(/{(\w+)}/g, (m, p) => ctx[p]);
            
            const a = document.createElement('a');
            a.href = uri + btoa(unescape(encodeURIComponent(data)));
            a.download = 'Opleidings-Statistieken.xls';
            a.click();
        }
    </script>
}